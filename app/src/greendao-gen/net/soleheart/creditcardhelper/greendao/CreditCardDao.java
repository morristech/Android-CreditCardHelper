package net.soleheart.creditcardhelper.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.soleheart.creditcardhelper.greendao.CreditCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CREDIT_CARD.
*/
public class CreditCardDao extends AbstractDao<CreditCard, Long> {

    public static final String TABLENAME = "CREDIT_CARD";

    /**
     * Properties of entity CreditCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankName = new Property(1, String.class, "bankName", false, "BANK_NAME");
        public final static Property BillDate = new Property(2, int.class, "billDate", false, "BILL_DATE");
        public final static Property PayDate = new Property(3, int.class, "payDate", false, "PAY_DATE");
        public final static Property LastDigits = new Property(4, String.class, "lastDigits", false, "LAST_DIGITS");
        public final static Property DynamicFreePeriod = new Property(5, Integer.class, "dynamicFreePeriod", false, "DYNAMIC_FREE_PERIOD");
    };


    public CreditCardDao(DaoConfig config) {
        super(config);
    }
    
    public CreditCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CREDIT_CARD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BANK_NAME' TEXT NOT NULL ," + // 1: bankName
                "'BILL_DATE' INTEGER NOT NULL ," + // 2: billDate
                "'PAY_DATE' INTEGER NOT NULL ," + // 3: payDate
                "'LAST_DIGITS' TEXT NOT NULL ," + // 4: lastDigits
                "'DYNAMIC_FREE_PERIOD' INTEGER);"); // 5: dynamicFreePeriod
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CREDIT_CARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CreditCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBankName());
        stmt.bindLong(3, entity.getBillDate());
        stmt.bindLong(4, entity.getPayDate());
        stmt.bindString(5, entity.getLastDigits());
 
        Integer dynamicFreePeriod = entity.getDynamicFreePeriod();
        if (dynamicFreePeriod != null) {
            stmt.bindLong(6, dynamicFreePeriod);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CreditCard readEntity(Cursor cursor, int offset) {
        CreditCard entity = new CreditCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // bankName
            cursor.getInt(offset + 2), // billDate
            cursor.getInt(offset + 3), // payDate
            cursor.getString(offset + 4), // lastDigits
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // dynamicFreePeriod
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CreditCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankName(cursor.getString(offset + 1));
        entity.setBillDate(cursor.getInt(offset + 2));
        entity.setPayDate(cursor.getInt(offset + 3));
        entity.setLastDigits(cursor.getString(offset + 4));
        entity.setDynamicFreePeriod(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CreditCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CreditCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
